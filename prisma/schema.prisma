generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum SoalType {
  ANGKA
  HURUF
  SYMBOL
}

enum StatusTest {
  PENDING
  SUCCESS
  FAILED
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  username  String   @unique
  password  String
  tglLahir  DateTime
  type      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  Test      Test[]
}

model Test {
  id               String     @id @default(uuid())
  tujuan           String
  registrationDate DateTime   @default(now())
  status           StatusTest @default(PENDING)
  User             User?      @relation(fields: [userId], references: [id])
  userId           Int?
  Sheet            Sheet[]
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @default(now())
}

// Lembar pekerjaan
model Sheet {
  id          Int           @id @default(autoincrement())
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  SoalOnSheet SoalOnSheet[]
  Test        Test?         @relation(fields: [testId], references: [id])
  testId      String?
}

//Soal di lembar pekerjaan
model SoalOnSheet {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  Sheet     Sheet?    @relation(fields: [sheetId], references: [id])
  sheetId   Int?
  Soal      Soal?     @relation(fields: [soalId], references: [id])
  soalId    Int?
  Jawaban   Jawaban[]
}

//Jawaban di lembar pekerjaan
model Jawaban {
  id            Int          @id @default(autoincrement())
  answers       String
  status        Boolean
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now())
  SoalOnSheet   SoalOnSheet? @relation(fields: [soalOnSheetId], references: [id])
  soalOnSheetId Int?
}

// Soal dan Jawaban
model Soal {
  id           Int           @id @default(autoincrement())
  question     String
  listOfChoise String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now())
  SoalOnSheet  SoalOnSheet[]
  Options      Options[]
  TypeSoal     TypeSoal?     @relation(fields: [typeSoalId], references: [id])
  typeSoalId   Int?
}

// Pilihan Jawaban
model Options {
  id            Int      @id @default(autoincrement())
  question      String
  correctAnswer String
  wrongAnswer   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  Soal          Soal?    @relation(fields: [soalId], references: [id])
  soalId        Int?
}

//Type Soal
model TypeSoal {
  id        Int      @id @default(autoincrement())
  name      SoalType
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  Soal      Soal[]
}
